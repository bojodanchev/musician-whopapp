// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Plans and job statuses per product spec
enum Plan {
  STARTER
  PRO
  STUDIO
}

enum JobStatus {
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
}

model User {
  id           String   @id @default(cuid())
  whopUserId   String   @unique
  username     String
  plan         Plan
  credits      Int      @default(0)
  createdAt    DateTime @default(now())

  // Relations
  assets       Asset[]
  jobs         Job[]
  events       Event[]
}

model Asset {
  id           String   @id @default(cuid())
  userId       String
  jobId        String
  title        String
  bpm          Int
  key          String?
  duration     Int
  wavUrl       String
  loopUrl      String
  stemsZipUrl  String?
  licenseUrl   String
  createdAt    DateTime @default(now())

  // Relations
  user         User     @relation(fields: [userId], references: [id])
  job          Job      @relation(fields: [jobId], references: [id])

  @@index([userId])
  @@index([jobId])
}

model Job {
  id           String     @id @default(cuid())
  userId       String
  status       JobStatus  @default(QUEUED)
  payloadJson  Json
  error        String?
  createdAt    DateTime   @default(now())
  completedAt  DateTime?

  // Relations
  user         User       @relation(fields: [userId], references: [id])
  assets       Asset[]

  @@index([userId])
  @@index([status])
}

model Event {
  id           String   @id @default(cuid())
  userId       String
  type         String
  payloadJson  Json
  createdAt    DateTime @default(now())

  // Relations
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
}
